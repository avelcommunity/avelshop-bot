from flask import Flask, request
import telebot
import sqlite3
import os
from waitress import serve

TOKEN = "7901522397:AAGtp5KPLlUDtAy7FPxoFpOX9uj0SYVL-gQ"
WEBHOOK_URL = "https://avelshop-bot.onrender.com/"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("avelshop.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    item TEXT
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS shop (
    name TEXT,
    price INTEGER
)
""")
conn.commit()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üí∞ –ë–∞–ª–∞–Ω—Å", "üõí –ú–∞–≥–∞–∑–∏–Ω")
    markup.row("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", "üõ† –ê–¥–º–∏–Ω–∫–∞")
    return markup

# --- –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    c.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (id, balance) VALUES (?, ?)", (user_id, 0))
        conn.commit()
    bot.send_message(user_id, "üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    text = message.text

    if text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        c.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = c.fetchone()[0]
        bot.send_message(user_id, f"üí∞ –£ –≤–∞—Å {balance} –ö—ç–ø–æ–≤.")

    elif text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
        c.execute("SELECT item FROM inventory WHERE user_id = ?", (user_id,))
        items = c.fetchall()
        if items:
            inv = "\n".join([f"‚Ä¢ {item[0]}" for item in items])
            bot.send_message(user_id, f"üéí –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{inv}")
        else:
            bot.send_message(user_id, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")

    elif text == "üõí –ú–∞–≥–∞–∑–∏–Ω":
        c.execute("SELECT name, price FROM shop")
        skins = c.fetchall()
        if not skins:
            bot.send_message(user_id, "‚õî –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
            return
        msg = "üõçÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã:\n"
        markup = telebot.types.InlineKeyboardMarkup()
        for name, price in skins:
            msg += f"{name} ‚Äî {price} –ö—ç–ø–æ–≤\n"
            markup.add(telebot.types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å: {name}", callback_data=f"buy|{name}"))
        bot.send_message(user_id, msg, reply_markup=markup)

    elif text == "üõ† –ê–¥–º–∏–Ω–∫–∞":
        bot.send_message(user_id, "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
                                  "/addskin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>\n"
                                  "/removeskin <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                                  "/add <id> <—Å—É–º–º–∞>\n"
                                  "/remove <id> <—Å—É–º–º–∞>\n"
                                  "/users")

# --- Inline-–∫–Ω–æ–ø–∫–∏ (–ø–æ–∫—É–ø–∫–∞) ---
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_id = call.from_user.id

    if call.data.startswith("buy|"):
        item = call.data.split("|", 1)[1]
        c.execute("SELECT price FROM shop WHERE name = ?", (item,))
        result = c.fetchone()
        if not result:
            bot.send_message(user_id, "‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        price = result[0]
        c.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = c.fetchone()[0]
        if balance < price:
            bot.send_message(user_id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ö—ç–ø–æ–≤.")
            return
        c.execute("SELECT item FROM inventory WHERE user_id = ? AND item = ?", (user_id, item))
        if c.fetchone():
            bot.send_message(user_id, "üì¶ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Å–∫–∏–Ω.")
            return
        c.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (price, user_id))
        c.execute("INSERT INTO inventory (user_id, item) VALUES (?, ?)", (user_id, item))
        conn.commit()
        bot.send_message(user_id, f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item}")

# --- –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@bot.message_handler(commands=["addskin", "removeskin", "add", "remove", "users"])
def admin_commands(message):
    cmd = message.text.split()
    if message.text.startswith("/addskin") and len(cmd) >= 3:
        name, price = " ".join(cmd[1:-1]), int(cmd[-1])
        c.execute("INSERT INTO shop (name, price) VALUES (?, ?)", (name, price))
        conn.commit()
        bot.reply_to(message, "‚úÖ –°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω.")
    elif message.text.startswith("/removeskin") and len(cmd) >= 2:
        name = " ".join(cmd[1:])
        c.execute("DELETE FROM shop WHERE name = ?", (name,))
        conn.commit()
        bot.reply_to(message, "‚úÖ –°–∫–∏–Ω —É–¥–∞–ª—ë–Ω.")
    elif message.text.startswith("/add") and len(cmd) == 3:
        target_id, amount = int(cmd[1]), int(cmd[2])
        c.execute("SELECT id FROM users WHERE id = ?", (target_id,))
        if c.fetchone():
            c.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (amount, target_id))
            conn.commit()
            bot.reply_to(message, "‚úÖ –ö—ç–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif message.text.startswith("/remove") and len(cmd) == 3:
        target_id, amount = int(cmd[1]), int(cmd[2])
        c.execute("SELECT id FROM users WHERE id = ?", (target_id,))
        if c.fetchone():
            c.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (amount, target_id))
            conn.commit()
            bot.reply_to(message, "‚úÖ –ö—ç–ø—ã —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif message.text.startswith("/users"):
        c.execute("SELECT id, balance FROM users")
        data = c.fetchall()
        if not data:
            bot.reply_to(message, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        out = "\n".join([f"üë§ {user[0]} ‚Äî {user[1]} –ö—ç–ø–æ–≤" for user in data])
        bot.reply_to(message, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{out}")

# --- –í–µ–±—Ö—É–∫ –¥–ª—è Render ---
@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "", 200

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ waitress ---
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    serve(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
