from flask import Flask, request
import telebot
import sqlite3
import os

TOKEN = "7901522397:AAGtp5KPLlUDtAy7FPxoFpOX9uj0SYVL-gQ"
WEBHOOK_URL = "https://avelshop-bot.onrender.com/"

ADMIN_IDS = [6425403420, 333849950]

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

conn = sqlite3.connect("avelshop.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    item TEXT
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS shop (
    name TEXT,
    price INTEGER
)
""")
conn.commit()

# --- –ó–≤–∞–Ω–∏—è ---
def get_rank(balance):
    if balance >= 10000:
        return "–ì–µ–Ω–µ—Ä–∞–ª (S)"
    elif balance >= 3000:
        return "–ü–æ–ª–∫–æ–≤–Ω–∏–∫ (AA)"
    elif balance >= 1801:
        return "–ú–∞–π–æ—Ä (A)"
    elif balance >= 1001:
        return "–ö–∞–ø–∏—Ç–∞–Ω (B)"
    elif balance >= 501:
        return "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç (C)"
    elif balance >= 201:
        return "–°–µ—Ä–∂–∞–Ω—Ç (D)"
    elif balance >= 35:
        return "–ö–∞–ø—Ä–∞–ª (E)"
    else:
        return "–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü"

# --- –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é Telegram ---
bot.set_my_commands([
    telebot.types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    telebot.types.BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
])

# --- –ú–µ–Ω—é ---
def main_menu():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        telebot.types.InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        telebot.types.InlineKeyboardButton("üìä –¢–æ–ø 10", callback_data="top")
    )
    markup.row(
        telebot.types.InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")
    )
    return markup

@bot.message_handler(commands=["start", "menu"])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    c.execute("SELECT id FROM users WHERE id = ?", (user_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (id, username, balance) VALUES (?, ?, ?)", (user_id, username, 0))
        conn.commit()
    bot.send_message(user_id, "üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@bot.message_handler(commands=["admin"])
def show_admin(message):
    if message.from_user.id in ADMIN_IDS:
       bot.send_message(message.chat.id, """üîß –ö–æ–º–∞–Ω–¥—ã:
/addskin <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>
/removeskin <–Ω–∞–∑–≤–∞–Ω–∏–µ>
/add <id> <—Å—É–º–º–∞>
/remove <id> <—Å—É–º–º–∞>
/users""")
    else:
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

@bot.message_handler(commands=["users"])
def show_users(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    c.execute("SELECT id, username FROM users")
    users = c.fetchall()
    text = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, uname in users:
        text += f"@{uname or 'unknown'} ‚Äî {uid}\n"
    bot.send_message(message.chat.id, text)

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    user_id = call.from_user.id

    if call.data == "balance":
        c.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = c.fetchone()[0]
        rank = get_rank(balance)
        bot.answer_callback_query(call.id)
        bot.send_message(user_id, f"üí∞ –£ –≤–∞—Å {balance} –ö—ç–ø–æ–≤ üéñ\nüéñ –ó–≤–∞–Ω–∏–µ: {rank}")

    elif call.data == "inventory":
        c.execute("SELECT item FROM inventory WHERE user_id = ?", (user_id,))
        items = c.fetchall()
        if items:
            inv = "\n".join([f"‚Ä¢ {item[0]}" for item in items])
            bot.send_message(user_id, f"üéí –í–∞—à–∏ —Å–∫–∏–Ω—ã:\n{inv}")
        else:
            bot.send_message(user_id, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")

    elif call.data == "shop":
        c.execute("SELECT name, price FROM shop")
        skins = c.fetchall()
        if not skins:
            bot.send_message(user_id, "‚õî –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
            return
        msg = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã:\n"
        markup = telebot.types.InlineKeyboardMarkup()
        for name, price in skins:
            msg += f"{name} - {price} –ö—ç–ø–æ–≤ üéñ\n"
            markup.add(telebot.types.InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å: {name}", callback_data=f"buy|{name}"))
        bot.send_message(user_id, msg, reply_markup=markup)

    elif call.data.startswith("buy|"):
        item = call.data.split("|", 1)[1]
        c.execute("SELECT price FROM shop WHERE name = ?", (item,))
        result = c.fetchone()
        if not result:
            bot.send_message(user_id, "‚ùå –°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        price = result[0]
        c.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = c.fetchone()[0]
        if balance < price:
            bot.send_message(user_id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ö—ç–ø–æ–≤.")
            return
        c.execute("SELECT item FROM inventory WHERE user_id = ? AND item = ?", (user_id, item))
        if c.fetchone():
            bot.send_message(user_id, "üì¶ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Å–∫–∏–Ω.")
            return
        c.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (price, user_id))
        c.execute("INSERT INTO inventory (user_id, item) VALUES (?, ?)", (user_id, item))
        conn.commit()
        bot.send_message(user_id, f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item}")

    elif call.data == "top":
        c.execute("SELECT id, username, balance FROM users ORDER BY balance DESC")
        users = c.fetchall()
        msg = "üèÜ –¢–æ–ø 10 –ø–æ –ö–≠–ü–∞–º:\n"
        for i, (uid, uname, bal) in enumerate(users[:10], 1):
            msg += f"{i}. @{uname or 'unknown'} - {bal} üéñ ({get_rank(bal)})\n"
        user_place = next((i+1 for i, (uid, _, _) in enumerate(users) if uid == user_id), None)
        msg += f"\n–í—ã –Ω–∞ {user_place} –º–µ—Å—Ç–µ."
        bot.send_message(user_id, msg)

    elif call.data == "help":
        help_msg = (
            "–ö–ï–ü ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ AVEL.\n"
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ö–ï–ü–´ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –ø–æ–±–µ–¥—ã, –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
            "üîí –ö–ï–ü–´ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å. –ò—Ö –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
            "üéñ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ö–ï–ü–´?\n\n"
            "–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ +5\n–í—ã—Ö–æ–¥ –≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª +5\n–í—ã—Ö–æ–¥ –≤ —Ñ–∏–Ω–∞–ª +10\n–ü–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ +25\nMVP —Ç—É—Ä–Ω–∏—Ä–∞ +10\n"
            "–ü—Ä–∏–≤—ë–ª –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ +10\n–ü–æ–º–æ—â—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É/—Å—Ç—Ä–∏–º–µ—Ä—É +5‚Äì10\n–ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã +10\n"
            "–ü–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏ +5‚Äì10\n–î–æ–Ω–∞—Ç +5‚Äì35\n–°–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ +10\n–®–æ—É-–º–∞—Ç—á +5\n"
            "2000+ ELO (+200 –ø–æ—Å–ª–µ 10 lvl) +20 (–µ–¥–∏–Ω–æ–∂–¥—ã)\n\n"
            "üö´ –®—Ç—Ä–∞—Ñ—ã:\n–ù–µ –ø—Ä–∏—à—ë–ª -50\n–û–ø–æ–∑–¥–∞–Ω–∏–µ -10\n–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å -10\n–ë–∞–Ω -30\n–û—Ç–º–µ–Ω–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã -10\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ 3 —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ–¥—Ä—è–¥.\n\n"
            "üß± –†–∞–Ω–≥–∏:\n35-200 –ö–∞–ø—Ä–∞–ª (E)\n201-500 –°–µ—Ä–∂–∞–Ω—Ç (D)\n501-1000 –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç (C)\n1001-1800 –ö–∞–ø–∏—Ç–∞–Ω (B)\n"
            "1801-3000 –ú–∞–π–æ—Ä (A)\n3000-9999 –ü–æ–ª–∫–æ–≤–Ω–∏–∫ (AA)\n10000+ –ì–µ–Ω–µ—Ä–∞–ª (S)"
        )
        bot.send_message(user_id, help_msg)

@bot.message_handler(commands=["addskin", "removeskin", "add", "remove"])
def admin_commands(message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return
    cmd = message.text.split()
    if message.text.startswith("/addskin") and len(cmd) >= 3:
        name, price = " ".join(cmd[1:-1]), int(cmd[-1])
        c.execute("INSERT INTO shop (name, price) VALUES (?, ?)", (name, price))
        conn.commit()
        bot.reply_to(message, "‚úÖ –°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω.")
    elif message.text.startswith("/removeskin") and len(cmd) >= 2:
        name = " ".join(cmd[1:])
        c.execute("DELETE FROM shop WHERE name = ?", (name,))
        conn.commit()
        bot.reply_to(message, "‚úÖ –°–∫–∏–Ω —É–¥–∞–ª—ë–Ω.")
    elif message.text.startswith("/add") and len(cmd) == 3:
        target_id, amount = int(cmd[1]), int(cmd[2])
        c.execute("SELECT id FROM users WHERE id = ?", (target_id,))
        if not c.fetchone():
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            c.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (amount, target_id))
            conn.commit()
            bot.reply_to(message, "‚úÖ –ö—ç–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    elif message.text.startswith("/remove") and len(cmd) == 3:
        target_id, amount = int(cmd[1]), int(cmd[2])
        c.execute("SELECT id FROM users WHERE id = ?", (target_id,))
        if not c.fetchone():
            bot.reply_to(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            c.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (amount, target_id))
            conn.commit()
            bot.reply_to(message, "‚úÖ –ö—ç–ø—ã —É–¥–∞–ª–µ–Ω—ã.")

@app.route("/", methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "", 200

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    from waitress import serve
    serve(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

